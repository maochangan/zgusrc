<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.zgysrc.www.dao.BookListMapper">
  <resultMap id="BaseResultMap" type="net.zgysrc.www.bean.BookList">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="father_id" jdbcType="INTEGER" property="fatherId" />
    <result column="book_list_name" jdbcType="VARCHAR" property="bookListName" />
    <result column="book_image_path_one" jdbcType="VARCHAR" property="bookImagePathOne" />
    <result column="like_num" jdbcType="INTEGER" property="likeNum" />
    <result column="book_click_num" jdbcType="INTEGER" property="bookClickNum" />
    <result column="list_num" jdbcType="INTEGER" property="listNum" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="net.zgysrc.www.bean.BookList">
    <result column="book_content" jdbcType="LONGVARCHAR" property="bookContent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, father_id, book_list_name, book_image_path_one, like_num, book_click_num, list_num
  </sql>
  <sql id="Blob_Column_List">
    book_content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="net.zgysrc.www.bean.BookListExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book_list
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="net.zgysrc.www.bean.BookListExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from book_list
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from book_list
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from book_list
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="net.zgysrc.www.bean.BookListExample">
    delete from book_list
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="net.zgysrc.www.bean.BookList">
    insert into book_list (id, father_id, book_list_name, 
      book_image_path_one, like_num, book_click_num, 
      list_num, book_content)
    values (#{id,jdbcType=INTEGER}, #{fatherId,jdbcType=INTEGER}, #{bookListName,jdbcType=VARCHAR}, 
      #{bookImagePathOne,jdbcType=VARCHAR}, #{likeNum,jdbcType=INTEGER}, #{bookClickNum,jdbcType=INTEGER}, 
      #{listNum,jdbcType=INTEGER}, #{bookContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="net.zgysrc.www.bean.BookList">
    insert into book_list
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="fatherId != null">
        father_id,
      </if>
      <if test="bookListName != null">
        book_list_name,
      </if>
      <if test="bookImagePathOne != null">
        book_image_path_one,
      </if>
      <if test="likeNum != null">
        like_num,
      </if>
      <if test="bookClickNum != null">
        book_click_num,
      </if>
      <if test="listNum != null">
        list_num,
      </if>
      <if test="bookContent != null">
        book_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="fatherId != null">
        #{fatherId,jdbcType=INTEGER},
      </if>
      <if test="bookListName != null">
        #{bookListName,jdbcType=VARCHAR},
      </if>
      <if test="bookImagePathOne != null">
        #{bookImagePathOne,jdbcType=VARCHAR},
      </if>
      <if test="likeNum != null">
        #{likeNum,jdbcType=INTEGER},
      </if>
      <if test="bookClickNum != null">
        #{bookClickNum,jdbcType=INTEGER},
      </if>
      <if test="listNum != null">
        #{listNum,jdbcType=INTEGER},
      </if>
      <if test="bookContent != null">
        #{bookContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="net.zgysrc.www.bean.BookListExample" resultType="java.lang.Long">
    select count(*) from book_list
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update book_list
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.fatherId != null">
        father_id = #{record.fatherId,jdbcType=INTEGER},
      </if>
      <if test="record.bookListName != null">
        book_list_name = #{record.bookListName,jdbcType=VARCHAR},
      </if>
      <if test="record.bookImagePathOne != null">
        book_image_path_one = #{record.bookImagePathOne,jdbcType=VARCHAR},
      </if>
      <if test="record.likeNum != null">
        like_num = #{record.likeNum,jdbcType=INTEGER},
      </if>
      <if test="record.bookClickNum != null">
        book_click_num = #{record.bookClickNum,jdbcType=INTEGER},
      </if>
      <if test="record.listNum != null">
        list_num = #{record.listNum,jdbcType=INTEGER},
      </if>
      <if test="record.bookContent != null">
        book_content = #{record.bookContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update book_list
    set id = #{record.id,jdbcType=INTEGER},
      father_id = #{record.fatherId,jdbcType=INTEGER},
      book_list_name = #{record.bookListName,jdbcType=VARCHAR},
      book_image_path_one = #{record.bookImagePathOne,jdbcType=VARCHAR},
      like_num = #{record.likeNum,jdbcType=INTEGER},
      book_click_num = #{record.bookClickNum,jdbcType=INTEGER},
      list_num = #{record.listNum,jdbcType=INTEGER},
      book_content = #{record.bookContent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update book_list
    set id = #{record.id,jdbcType=INTEGER},
      father_id = #{record.fatherId,jdbcType=INTEGER},
      book_list_name = #{record.bookListName,jdbcType=VARCHAR},
      book_image_path_one = #{record.bookImagePathOne,jdbcType=VARCHAR},
      like_num = #{record.likeNum,jdbcType=INTEGER},
      book_click_num = #{record.bookClickNum,jdbcType=INTEGER},
      list_num = #{record.listNum,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="net.zgysrc.www.bean.BookList">
    update book_list
    <set>
      <if test="fatherId != null">
        father_id = #{fatherId,jdbcType=INTEGER},
      </if>
      <if test="bookListName != null">
        book_list_name = #{bookListName,jdbcType=VARCHAR},
      </if>
      <if test="bookImagePathOne != null">
        book_image_path_one = #{bookImagePathOne,jdbcType=VARCHAR},
      </if>
      <if test="likeNum != null">
        like_num = #{likeNum,jdbcType=INTEGER},
      </if>
      <if test="bookClickNum != null">
        book_click_num = #{bookClickNum,jdbcType=INTEGER},
      </if>
      <if test="listNum != null">
        list_num = #{listNum,jdbcType=INTEGER},
      </if>
      <if test="bookContent != null">
        book_content = #{bookContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="net.zgysrc.www.bean.BookList">
    update book_list
    set father_id = #{fatherId,jdbcType=INTEGER},
      book_list_name = #{bookListName,jdbcType=VARCHAR},
      book_image_path_one = #{bookImagePathOne,jdbcType=VARCHAR},
      like_num = #{likeNum,jdbcType=INTEGER},
      book_click_num = #{bookClickNum,jdbcType=INTEGER},
      list_num = #{listNum,jdbcType=INTEGER},
      book_content = #{bookContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.zgysrc.www.bean.BookList">
    update book_list
    set father_id = #{fatherId,jdbcType=INTEGER},
      book_list_name = #{bookListName,jdbcType=VARCHAR},
      book_image_path_one = #{bookImagePathOne,jdbcType=VARCHAR},
      like_num = #{likeNum,jdbcType=INTEGER},
      book_click_num = #{bookClickNum,jdbcType=INTEGER},
      list_num = #{listNum,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>